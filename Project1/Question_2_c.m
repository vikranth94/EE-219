
clc;
clear all;
close all;
data = importdata('network_backup_dataset.csv');
data.textdata =  data.textdata(2:end , :);
l = length(data.textdata);
%data.data = [data.data zeros(l,1)]
x2 = zeros(l,1);
x1 = str2double(data.textdata(:,1)); % week number

for i=1:l
    if(strcmp(data.textdata(i,2),'Monday'))
        x2(i) = 1;
    elseif(strcmp(data.textdata(i,2),'Tuesday'))
        x2(i) = 2;
    elseif(strcmp(data.textdata(i,2),'Wednesday'))
        x2(i) = 3;
    elseif(strcmp(data.textdata(i,2),'Thursday'))
        x2(i) = 4;
    elseif(strcmp(data.textdata(i,2),'Friday'))
        x2(i) = 5;
    elseif(strcmp(data.textdata(i,2),'Saturday'))
        x2(i) = 6;
    elseif(strcmp(data.textdata(i,2),'Sunday'))
        x2(i) = 7;
    end
end  % Day of the week

x3 = str2double(data.textdata(:,3)); % backup start time

x4= zeros(l,1);
x5 = zeros(l,1);
for i= 1:l
    temp1 = char(data.textdata(i,4));
    temp2 = char(data.textdata(i,5));
    x4(i) = str2double(temp1(end:end)); % extracting workflow id
    
    l2 = length(temp2);
    if(l2 == 6)
        x5(i) = str2double(temp2(end:end));
    elseif(l2 ==7)
        x5(i) = str2double(temp2(end-1:end)); % extracting file name
    end
end

y= data.data(:,1);
x = [x1 x2 x3 x4 x5];


% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 30-Jan-2017 02:19:56
%
% This script assumes these variables are defined:
%
%   x - input data.
%   y - target data.

x = x';
t = y';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainbr';  % Bayesian Regularization backpropagation.

% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

